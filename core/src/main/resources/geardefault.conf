#########################################
### This is the default configuration for gearpump
### To use the application, you at least need to change gearpump.cluster to point to right master
#########################################

### Configurations that are shared by all services and all user applications...
gearpump {

  ###########################
  ### Change the dispather for tasks
  ### If you don't know what this is about, don't change it
  ###########################

  task-dispatcher = "gearpump.shared-thread-pool-dispatcher"

  ## The installation folder of gearpump
  home = ""

  ## Time out setting to start a new executor system
  ## It takes a bit longer time than expected as a new JVM is created
  start-executor-system-timeout-ms = 30000

  ###########################
  ### Metrics setting,
  ### If you want to use metrics, please change
  ###########################


  ### Flag to enable metrics
  metrics {
    enabled = false

    ### We will take one metric out of ${sample.rate}
    ### This config will slightly impact the application's performance, larger rate often brings higher throughput.
    sample-rate = 1

    report-interval-ms = 15000

    # reporter = "graphite"
    # reporter = "akka"
    reporter = "akka"

    graphite {
      ## Graphite host settings
      host = "127.0.0.1"
      port = 2003
    }

    logfile {

    }

    ## Coarse-grain history metrics, which have a larger timespan but sparse data points
    retainHistoryData {
      # max hours of history data to retain
      # Note: due to implementation limitation(we store all history in memory),
      # please don't set this to too big which may exhaust memory.
      hours = 72

      # time interval between two data points for history data (unit: ms)
      # Usually this value is set to a big value so that we only store
      # coarse-grain data
      intervalMs = 3600000
    }

    ## fine-grain recent metrics which just happened, which have a smaller timespan but dense data points
    retainRecentData {

      # max seconds of recent data to retain,
      # THis is for the fine-grain data
      seconds = 300

      # time interval between two data points for recent data (unit: ms)
      intervalMs = 15000
    }
    akka {
      ### For this reporter, at most we will return max-limit-on-query metric item.
      max-limit-on-query = 1000

      ### Whitelist for Metrics Aggregator class.
      ### See class [[MetricsAggregator]] for more information.
      metrics-aggregator-class {
        ## Format io.gearpump.KeyFullClassName = ""
      }
    }
  }

  ## Whether to enable remote-debug mode.
  ## In remote debug mode, every executor process will bind to a free port, and
  ## listen for remote jvm debug.
  remote-debug-executor-jvm = false

  ### verbose gc
  ### turn on JVM verbose GC
  ### We will use -verbose:gc -Xloggc: -XX:+PrintGCDetails
  ### -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution
  ### -XX:+PrintGCApplicationConcurrentTime
  ### -XX:+PrintGCApplicationStoppedTime
  verbose-gc = false

  #######################################
  ### Logging settings
  #######################################
  # The log dir for daemon processes
  log.daemon.dir = "logs"

  # The log dir for applications
  log.application.dir = "logs"

  serializer.pool = "io.gearpump.serializer.FastKryoSerializerPool"

  serializers {
    ## Use default serializer for these types
    "scala.collection.immutable.List" = ""
    "scala.collection.immutable.Vector" = ""
    "scala.collection.immutable.$colon$colon" = ""
    "[B" = ""
    "[C" = ""
    "[S" = ""
    "[I" = ""
    "[J" = ""
    "[F" = ""
    "[D" = ""
    "[Z" = ""
    "[Ljava.lang.String;" = ""
    "scala.Array" = ""
    "scala.Tuple1" = ""
    "scala.Tuple2" = ""
    "scala.Tuple3" = ""
    "scala.Tuple4" = ""
    "scala.Tuple5" = ""
    "scala.Tuple6" = ""
    "akka.actor.LocalActorRef" = ""
  }

  ## How many slots each worker contains
  worker.slots = 100

  ## The class responsable for launching the executor process.
  ## User can switch to "io.gearpump.cluster.worker.CGroupProcessLauncher" to enable CGroup support.
  worker.executor-process-launcher = "io.gearpump.cluster.worker.DefaultExecutorProcessLauncher"

  ## To enable worker use cgroup to make resource isolation,
  ## set gearpump.worker.executor-process-launcher = "io.gearpump.cluster.worker.CGroupProcessLauncher"
  ##
  ## Before enable it, you should also make sure:
  ## 	1. Linux version (>= 2.6.18)
  ## 	2. Have installed cgroup (check the file's existence:/proc/cgroups)
  ## You can get more information from http://gearpump.io
  ##
  ## For cgroup root, it represents the root node in CGroup's hierarchythe.
  ## It's full path in local file system is "${cpu_mount_point} + root".
  ## The cpu_mount_point is the cpu subsystem's mount poing in CGroup.
  ## The root dir should be consistent with the part configured in /etc/cgconfig.conf
  cgroup {
    root = "gearpump"

    ## This config only works when cgroup is enabled.
    ## The value means the number of CPU cores per executor can use, -1 means no limitation.
    cpu-core-limit-per-executor = 1
  }

  ##
  ## Executor share same process of worker
  worker.executor-share-same-jvm-as-worker = false

  ###################
  ### Appmaster JVM argument configuration
  ###################
  appmaster {
    vmargs = ""
    extraClasspath = ""
  }

  ###################
  ### Executor argument configuration
  ### Executor JVM can contains multiple tasks
  ###################
  executor {
    vmargs = ""
    extraClasspath = ""
  }

  ##############################
  ### Required to change!!
  ### You need to set the master cluster address here
  ###
  ###
  ### For example, you may start three master
  ### on node1: bin/master -ip node1 -port 3000
  ### on node2: bin/master -ip node2 -port 3000
  ### on node3: bin/master -ip node3 -port 3000
  ###
  ### Then you need to set the cluster.masters = ["node1:3000","node2:3000","node3:3000"]
  cluster {
    masters = []
  }

  ##############################
  ### Required to change!!
  ### You need to set the actual host name here
  ###
  hostname = "127.0.0.1"

  ### When the resource cannot be allocated in the timeout, then
  ### the appmaster will shutdown itself.
  resource-allocation-timeout-seconds = 10

  ### client's timeout (in second) to connect to master and wait for the response
  masterclient.timeout = 90

  ### Define where the submitted jar file will be stored at

  ### This path follows the hadoop path schema
  ### For HDFS, use hdfs://host:port/path/
  ### If you want to store on master nodes, then use local directory,
  ### jarstore.rootpath = "jarstore/" will points to relative directory where master is started.
  ### jarstore.rootpath = "/jarstore/" will points to absolute directory on master server
  jarstore.rootpath = "jarstore/"

  #########################
  ### Scheduller for master, it will use this scheduler to schedule resource for
  ### different applications.
  ### If you don't know what is this about, don't change it
  #########################
  scheduling {
    scheduler-class = "io.gearpump.cluster.scheduler.PriorityScheduler"
  }

  #############################################
  # Default Configuration for REST, WebSocket, Http services
  #############################################

  #########################
  ### services can be started by a command line tool bin/services
  ### If you don't know what is this about, don't change it
  #########################
  services {
    host = "127.0.0.1"
    http = 8090
    supervisor-actor-path = ""

    ## To get a detail config string with origin and comments, change this to false.
    config-render-option-concise = true
  }

  #############################################
  ## Default Configuration for Gearpump Netty transport layer
  ## If you don't know what is this about, don't change it
  #############################################
  netty {
    buffer-size = 5242880
    max-retries = 30
    base-sleep-ms = 100
    max-sleep-ms = 1000
    message-batch-size = 262144
    flush-check-interval = 5
    dispatcher = "gearpump.shared-thread-pool-dispatcher"
  }

  ##################################
  ### Akka Dispatcher configurations
  ### If you don't know what is this about, don't change it
  ##################################
  shared-thread-pool-dispatcher {
    mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
    throughput = 100
    fork-join-executor {
      parallelism-factor = 2
      parallelism-max = 8
      parallelism-min = 2
    }
  }

  single-thread-dispatcher {
    type = PinnedDispatcher
  }
}

### Configuration only visible to master nodes..
gearpump-master {
  ## NOTE: Please add akka-related settings in gear.conf to avoid confusion in
  ## config overriding.
}

### Configuration only visible to worker nodes...
gearpump-worker {
  ## NOTE: Please add akka-related settings in gear.conf to avoid confusion in
  ## config overriding.
}

## Configurations only visible on Windows operation system..
gearpump-windows {
}

### configurations only visible to UI service...
gearpump-ui {
  ## Security related settings
  gearpump.ui-security {

    ## Whether enable authentication for UI Server
    authentication-enabled = false

    ## What authenticator to use. The class must implement interface
    ## io.gearpump.security.Authenticator
    authenticator = "io.gearpump.security.ConfigFileBasedAuthenticator"

    ## Configuration options for authenticator io.gearpump.security.ConfigFileBasedAuthenticator
    config-file-based-authenticator = {
      ## Format: username = "password_hash_value"
      ## password_hash_value can be generated by running shell tool:
      ## bin/gear io.gearpump.security.PasswordUtil -password <your raw password>

      ## Admin users have super permission to do everything
      admins = {
        ## Default Admin. Username: admin, password: admin
        # "admin" = "AeGxGOxlU8QENdOXejCeLxy+isrCv0TrS37HwA=="
      }

      ## normal user have special permission for certain operations.
      users = {
        ## "user" = "AeGxGOxlU8QENdOXejCeLxy+isrCv0TrS37HwA=="
      }

      ## Guest user can only view the UI with minimum permission. With no permission to submit/change/kill
      ## a running application.
      guests = {
        ## Default guest. Username: guest, Password: guest
        #"guest" = "ws+2Dy/FHX4cBb3uKGTR64kZWlWbC91XZRRoew=="
      }
    }
  }
}


###################################################################
###################################################################
## The following configurations supercede the default akka config
###################################################################
###################################################################

## work-around to fix akka io performance issue on windows
## reference: http://stackoverflow.com/questions/29453848/high-cpu-on-akka-io-pinned-dispatcher-on-windows
## ticket: https://github.com/akka/akka/issues/16295
akka.io.tcp.windows-connection-abort-workaround-enabled=off

akka.scheduler.tick-duration = 1

akka {
  http {
    client {
      parsing {
        max-content-length = 2048m
      }
    }
    server {
      remote-address-header = on
      parsing {
        max-content-length = 2048m
        illegal-header-warnings = off
      }
    }

    ## Akka-http session related settings
    session {

      serverSecret = "!!!please change this to a value only you know!!!"

      clientSession {
        cookie {
          name = "gearpump_token"
          ## domain = "..."
          path = "/"
          ## maxAge = 0
          secure = false
          httpOnly = true
        }

        ## Session lifetime. Default value is about 1 month
        maxAgeSeconds = 2592000
        encryptData = true
      }
    }
  }

  test {
    ##  duration to wait in expectMsg in akka test
    single-expect-default = 10s
  }

  daemonic = on

  extensions = [
    "io.gearpump.transport.Express$",
    "io.gearpump.metrics.Metrics$"
  ]
  loglevel = "INFO"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters = off
  log-dead-letters-during-shutdown = off
  actor {
    provider = "akka.remote.RemoteActorRefProvider"

    ## TODO: in integration test, may need to enable this
    ##creation-timeout=100s
    default-mailbox {
      mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
    }
    default-dispatcher {
      mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
      throughput = 10
      fork-join-executor {
        parallelism-factor = 2
        parallelism-max = 4
        parallelism-min = 4
      }
    }
    kryo {
      buffer-size = 4096
      classes = [
      ]

      compression = off
      idstrategy = "incremental"
      implicit-registration-logging = true
      kryo-reference-map = true
      kryo-trace = false
      mappings {
      }
      max-buffer-size = -1
      serializer-pool-size = 16
      type = "graph"
      use-manifests = false
    }
  }
  remote {
    log-remote-lifecycle-events = off
    use-dispatcher = "akka.remote.default-remote-dispatcher"
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = "127.0.0.1"
      port = 0
      send-buffer-size = 4096000b
      receive-buffer-size = 4096000b
      maximum-frame-size = 2048000b
    }
    default-remote-dispatcher {
      throughput = 5
      type = Dispatcher
      mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
      executor = "fork-join-executor"
    }
  }
}
