gearpump {
  task-dispatcher = "akka.actor.pined-dispatcher"
  netty-dispatcher = "akka.actor.default-dispatcher"

  metrics.enabled = false
  metrics.graphite.host = "192.168.1.54"
  metrics.graphite.port = 2003
  metrics.sample.rate = 1

  serializers {
    "org.apache.gearpump.Message" = "org.apache.gearpump.streaming.MessageSerializer"
    "org.apache.gearpump.streaming.task.AckRequest" = "org.apache.gearpump.streaming.AckRequestSerializer"
    "org.apache.gearpump.streaming.task.Ack" = "org.apache.gearpump.streaming.AckSerializer"

    ## Use default serializer for these types
    "[B" = ""
    "[C" = ""
    "[S" = ""
    "[I" = ""
    "[J" = ""
    "[F" = ""
    "[D" = ""
    "[Z" = ""
    "[Ljava.lang.String;" = ""
    "scala.Tuple1" = ""
    "scala.Tuple2" = ""
    "scala.Tuple3" = ""
    "scala.Tuple4" = ""
    "scala.Tuple5" = ""
    "scala.Tuple6" = ""


  }

  cluster {
    masters = ["127.0.0.1:3000", "127.0.0.1:3001", "127.0.0.1:3002"]
  }

  scheduling {
    scheduler-class = "org.apache.gearpump.cluster.scheduler.PriorityScheduler"
  }

  rest-services {
    host = "127.0.0.1"
    port = 8090
  }

  streaming {
    appmaster {
      vmargs = "-server -Xms512M -Xmx1024M -Xss1M -XX:MaxPermSize=128m -XX:+HeapDumpOnOutOfMemoryError -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=80 -XX:+UseParNewGC -XX:NewRatio=3"
##      vmargs = "-server -Xms1024M -Xmx4096M -Xss1M -XX:MaxPermSize=128m -XX:+HeapDumpOnOutOfMemoryError -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=80 -XX:+UseParNewGC -XX:NewRatio=3 -XX:NewSize=512m"
	}

    executor {
      vmargs = "-server -Xms512M -Xmx1024M -Xss1M -XX:MaxPermSize=128m -XX:+HeapDumpOnOutOfMemoryError -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=80 -XX:+UseParNewGC -XX:NewRatio=3"
      extraClasspath = ""
#      vmargs = "-server -Xms1024M -Xmx4096M -Xss1M -XX:MaxPermSize=128m -XX:+HeapDumpOnOutOfMemoryError  -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=80 -XX:+UseParNewGC -XX:NewRatio=3 -XX:NewSize=512m"
    }
  }
}

master {
  extensions = [
    "akka.contrib.datareplication.DataReplication$"
  ]
  akka {
    actor {
      ## Master forms a akka cluster
      provider = "akka.cluster.ClusterActorRefProvider"
    }
    remote {
      log-remote-lifecycle-events = off
    }
    cluster {
      roles = ["master"]
      auto-down-unreachable-after = 15s
    }
    log-dead-letters = off
  }
}

worker {
  ## Add worker overrided config
  akka {
    actor {
      provider = "akka.remote.RemoteActorRefProvider"
    }
    cluster {
      roles = ["worker"]
      resource {
        slots = 100
      }
    }
  }
}

akka {
  extensions = [
    "com.romix.akka.serialization.kryo.KryoSerializationExtension$",
    "org.apache.gearpump.transport.Express$",
    "org.apache.gearpump.metrics.Metrics$"
  ]
  loglevel = "INFO"
  actor {
    provider = "akka.remote.RemoteActorRefProvider"
    default-mailbox {
      mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
    }
    default-dispatcher {
      mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
      throughput = 10
      fork-join-executor {
        parallelism-factor = 2
        parallelism-max = 4
        parallelism-min = 4
      }
    }
    pined-dispatcher {
      mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
      executor = "thread-pool-executor"
      type = "PinnedDispatcher"
    }
    serializers {
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }
    serialization-bindings {
    }

    kryo {
      buffer-size = 4096
      classes = [
      ]
      kryo-custom-serializer-init = "org.apache.gearpump.serializer.GearpumpSerialization"
      compression = off
      idstrategy = "incremental"
      implicit-registration-logging = true
      kryo-reference-map = true
      kryo-trace = false
      mappings {
      }
      max-buffer-size = -1
      serializer-pool-size = 16
      type = "graph"
      use-manifests = false
    }
  }
  remote {
#    use-dispatcher = ""
    use-dispatcher = "akka.remote.default-remote-dispatcher"
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      port = 0
      server-socket-worker-pool {
        pool-size-min = 1
        pool-size-max = 1
      }
      client-socket-worker-pool {
        pool-size-min = 1
        pool-size-max = 1
      }
    }
    default-remote-dispatcher {
      throughput = 5
      type = Dispatcher
      mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
      executor = "fork-join-executor"
      fork-join-executor {
        parallelism-min = 1
        parallelism-max = 1
      }
    }
  }
}
